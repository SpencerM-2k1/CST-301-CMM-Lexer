# Generated from CMM.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,4,0,73,8,0,11,0,12,0,74,1,1,4,1,78,8,
        1,11,1,12,1,79,1,2,4,2,83,8,2,11,2,12,2,84,1,2,1,2,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,
        21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
        33,1,33,1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,
        13,13,32,32,195,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,1,72,1,0,0,0,3,77,1,0,0,0,5,82,1,0,0,0,7,88,1,0,0,0,
        9,91,1,0,0,0,11,96,1,0,0,0,13,102,1,0,0,0,15,109,1,0,0,0,17,114,
        1,0,0,0,19,120,1,0,0,0,21,128,1,0,0,0,23,134,1,0,0,0,25,138,1,0,
        0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,147,1,0,0,0,33,149,1,0,0,0,
        35,151,1,0,0,0,37,153,1,0,0,0,39,156,1,0,0,0,41,159,1,0,0,0,43,161,
        1,0,0,0,45,164,1,0,0,0,47,166,1,0,0,0,49,169,1,0,0,0,51,172,1,0,
        0,0,53,175,1,0,0,0,55,177,1,0,0,0,57,179,1,0,0,0,59,181,1,0,0,0,
        61,183,1,0,0,0,63,185,1,0,0,0,65,187,1,0,0,0,67,189,1,0,0,0,69,191,
        1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,
        74,75,1,0,0,0,75,2,1,0,0,0,76,78,7,1,0,0,77,76,1,0,0,0,78,79,1,0,
        0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,4,1,0,0,0,81,83,7,2,0,0,82,81,
        1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,
        86,87,6,2,0,0,87,6,1,0,0,0,88,89,5,105,0,0,89,90,5,102,0,0,90,8,
        1,0,0,0,91,92,5,101,0,0,92,93,5,108,0,0,93,94,5,115,0,0,94,95,5,
        101,0,0,95,10,1,0,0,0,96,97,5,119,0,0,97,98,5,104,0,0,98,99,5,105,
        0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,12,1,0,0,0,102,103,5,
        114,0,0,103,104,5,101,0,0,104,105,5,116,0,0,105,106,5,117,0,0,106,
        107,5,114,0,0,107,108,5,110,0,0,108,14,1,0,0,0,109,110,5,114,0,0,
        110,111,5,101,0,0,111,112,5,97,0,0,112,113,5,100,0,0,113,16,1,0,
        0,0,114,115,5,119,0,0,115,116,5,114,0,0,116,117,5,105,0,0,117,118,
        5,116,0,0,118,119,5,101,0,0,119,18,1,0,0,0,120,121,5,119,0,0,121,
        122,5,114,0,0,122,123,5,105,0,0,123,124,5,116,0,0,124,125,5,101,
        0,0,125,126,5,108,0,0,126,127,5,110,0,0,127,20,1,0,0,0,128,129,5,
        98,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,132,5,97,0,0,132,
        133,5,107,0,0,133,22,1,0,0,0,134,135,5,105,0,0,135,136,5,110,0,0,
        136,137,5,116,0,0,137,24,1,0,0,0,138,139,5,99,0,0,139,140,5,104,
        0,0,140,141,5,97,0,0,141,142,5,114,0,0,142,26,1,0,0,0,143,144,5,
        43,0,0,144,28,1,0,0,0,145,146,5,45,0,0,146,30,1,0,0,0,147,148,5,
        42,0,0,148,32,1,0,0,0,149,150,5,47,0,0,150,34,1,0,0,0,151,152,5,
        61,0,0,152,36,1,0,0,0,153,154,5,61,0,0,154,155,5,61,0,0,155,38,1,
        0,0,0,156,157,5,33,0,0,157,158,5,61,0,0,158,40,1,0,0,0,159,160,5,
        60,0,0,160,42,1,0,0,0,161,162,5,60,0,0,162,163,5,61,0,0,163,44,1,
        0,0,0,164,165,5,62,0,0,165,46,1,0,0,0,166,167,5,62,0,0,167,168,5,
        61,0,0,168,48,1,0,0,0,169,170,5,38,0,0,170,171,5,38,0,0,171,50,1,
        0,0,0,172,173,5,124,0,0,173,174,5,124,0,0,174,52,1,0,0,0,175,176,
        5,33,0,0,176,54,1,0,0,0,177,178,5,59,0,0,178,56,1,0,0,0,179,180,
        5,44,0,0,180,58,1,0,0,0,181,182,5,40,0,0,182,60,1,0,0,0,183,184,
        5,41,0,0,184,62,1,0,0,0,185,186,5,123,0,0,186,64,1,0,0,0,187,188,
        5,125,0,0,188,66,1,0,0,0,189,190,5,91,0,0,190,68,1,0,0,0,191,192,
        5,93,0,0,192,70,1,0,0,0,4,0,74,79,84,1,6,0,0
    ]

class CMMLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    NUM = 2
    WS = 3
    IF = 4
    ELSE = 5
    WHILE = 6
    RETURN = 7
    READ = 8
    WRITE = 9
    WRITELN = 10
    BREAK = 11
    INT = 12
    CHAR = 13
    PLUS = 14
    MINUS = 15
    MULTIPLY = 16
    DIVIDE = 17
    EQUALS = 18
    EQUALS_EQUALS = 19
    NOT_EQUALS = 20
    LESS_THAN = 21
    LESS_THAN_OR_EQUAL = 22
    GREATER_THAN = 23
    GREATER_THAN_OR_EQUAL = 24
    AND = 25
    OR = 26
    NOT = 27
    SEMI = 28
    COMMA = 29
    LPAREN = 30
    RPAREN = 31
    LBRACE = 32
    RBRACE = 33
    LBRACKET = 34
    RBRACKET = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'return'", "'read'", "'write'", 
            "'writeln'", "'break'", "'int'", "'char'", "'+'", "'-'", "'*'", 
            "'/'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'&&'", "'||'", "'!'", "';'", "','", "'('", "')'", "'{'", "'}'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "WS", "IF", "ELSE", "WHILE", "RETURN", "READ", 
            "WRITE", "WRITELN", "BREAK", "INT", "CHAR", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", 
            "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
            "AND", "OR", "NOT", "SEMI", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "LBRACKET", "RBRACKET" ]

    ruleNames = [ "ID", "NUM", "WS", "IF", "ELSE", "WHILE", "RETURN", "READ", 
                  "WRITE", "WRITELN", "BREAK", "INT", "CHAR", "PLUS", "MINUS", 
                  "MULTIPLY", "DIVIDE", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", 
                  "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
                  "AND", "OR", "NOT", "SEMI", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "LBRACKET", "RBRACKET" ]

    grammarFileName = "CMM.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


